import asyncio
import random
import subprocess
import os

from loguru import logger

from src.model.crusty_swap.instance import CrustySwap
from src.model.disperse_from_one.instance import DisperseFromOneWallet
from src.model.balance_checker.instance import BalanceChecker
from src.model.disperse_one_one.instance import DisperseOneOne
import src.utils
from src.utils.output import show_dev_info, show_logo
import src.model
from src.utils.statistics import print_wallets_stats
from src.utils.check_github_version import check_version
from src.utils.logs import ProgressTracker, create_progress_tracker

async def start():
    async def launch_wrapper(index, proxy, private_key, discord_token, twitter_token, email):
        async with semaphore:
            await account_flow(
                index,
                proxy,
                private_key,
                discord_token,
                twitter_token,
                email,
                config,
                lock,
                progress_tracker,
            )

    show_logo()
    show_dev_info()

    try:
        await check_version("0xStarLabs", "StarLabs-Monad")
    except Exception as e:
        import traceback

        traceback.print_exc()
        logger.error(f"Kh√¥ng th·ªÉ ki·ªÉm tra phi√™n b·∫£n: {e}")
        logger.info("Ti·∫øp t·ª•c v·ªõi phi√™n b·∫£n hi·ªán t·∫°i\n")

    print("")

    print("C√°c t√πy ch·ªçn c√≥ s·∫µn:\n")
    print("[1] üòà B·∫Øt ƒë·∫ßu farm")
    print("[2] üîß Ch·ªânh s·ª≠a c·∫•u h√¨nh")
    print("[3] üîç Ki·ªÉm tra s·ªë d∆∞")
    print("[4] üîÑ C·∫≠p nh·∫≠t")
    print("[5] üëã Tho√°t")
    
    try:
        choice = input("Nh·∫≠p t√πy ch·ªçn (1-5): ").strip()
    except Exception as e:
        logger.error(f"L·ªói nh·∫≠p li·ªáu: {e}")
        return
    if choice == "5" or not choice:
        return
    elif choice == "4":
        try:
            logger.info("ƒêang ch·∫°y t·∫≠p l·ªánh update.bat...")
            
            # L·∫•y th∆∞ m·ª•c n∆°i process.py ƒëang n·∫±m
            current_dir = os.path.dirname(os.path.abspath(__file__))
            
            # Ch·∫°y file update.bat t·ª´ th∆∞ m·ª•c hi·ªán t·∫°i
            update_script = os.path.join(current_dir, "update.bat")
            
            # S·ª≠ d·ª•ng subprocess ƒë·ªÉ ch·∫°y t·∫≠p l·ªánh batch v√† ƒë·ª£i ho√†n th√†nh
            subprocess.run(update_script, shell=True, check=True)
            
            logger.success("C·∫≠p nh·∫≠t ho√†n t·∫•t")
            return
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ ch·∫°y t·∫≠p l·ªánh c·∫≠p nh·∫≠t: {e}")
            return
    elif choice == "3":
        proxies = src.utils.read_txt_file("proxies", "data/proxies.txt")
        if len(proxies) == 0:
            logger.error("Kh√¥ng t√¨m th·∫•y proxy trong data/proxies.txt")
            return
        proxies = src.utils.check_proxy_format(proxies)
        if proxies is False:
            return
        private_keys = src.utils.read_txt_file("kh√≥a ri√™ng", "data/private_keys.txt")
        balance_checker = BalanceChecker(private_keys, proxies[0])
        await balance_checker.run()
        return
    elif choice == "2":
        config_ui = src.utils.ConfigUI()
        config_ui.run()
        return
    elif choice == "1":
        pass
    else:
        logger.error(f"T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: {choice}")
        return

    config = src.utils.get_config()

    # ƒê·ªçc t·∫•t c·∫£ c√°c file
    proxies = src.utils.read_txt_file("proxies", "data/proxies.txt")
    if len(proxies) == 0:
        logger.error("Kh√¥ng t√¨m th·∫•y proxy trong data/proxies.txt")
        return
    proxies = src.utils.check_proxy_format(proxies)
    if proxies is False:
        return
    
    if "disDashHere_farm_accounts" in config.FLOW.TASKS:
        main_keys = src.utils.read_txt_file("kh√≥a ri√™ng", "data/private_keys.txt")
        farm_keys = src.utils.read_txt_file("kh√≥a ri√™ng", "data/keys_for_faucet.txt")
        disperse_one_one = DisperseOneOne(main_keys, farm_keys, proxies, config)
        await disperse_one_one.disperse()
        return
    elif "disperse_from_one_wallet" in config.FLOW.TASKS:
        main_keys = src.utils.read_txt_file("kh√≥a ri√™ng", "data/private_keys.txt")
        farm_keys = src.utils.read_txt_file("kh√≥a ri√™ng", "data/keys_for_faucet.txt")
        disperse_one_wallet = DisperseFromOneWallet(
            farm_keys[0], main_keys, proxies, config
        )
        await disperse_one_wallet.disperse()
        return

    if "farm_faucet" in config.FLOW.TASKS:
        private_keys = src.utils.read_txt_file(
            "kh√≥a ri√™ng", "data/keys_for_faucet.txt"
        )
    else:
        private_keys = src.utils.read_txt_file("kh√≥a ri√™ng", "data/private_keys.txt")

    if "dusted" in config.FLOW.TASKS and not config.DUSTED.SKIP_TWITTER_VERIFICATION:
        twitter_tokens = src.utils.read_txt_file("m√£ Twitter", "data/twitter_tokens.txt")
        if len(twitter_tokens) < len(private_keys):
            logger.error(f"Kh√¥ng ƒë·ªß m√£ Twitter. M√£ Twitter: {len(twitter_tokens)} < Kh√≥a ri√™ng: {len(private_keys)}")
            return
    else:
        twitter_tokens = [""] * len(private_keys)
    
    if "crusty_refuel_from_one_to_all" in config.FLOW.TASKS:
        private_keys_to_distribute = private_keys[1:]
        crusty_swap = CrustySwap(
            1,
            proxies[0],
            private_keys[0],
            config
        )
        await crusty_swap.refuel_from_one_to_all(private_keys_to_distribute)
        return

    # X√°c ƒë·ªãnh ph·∫°m vi t√†i kho·∫£n
    start_index = config.SETTINGS.ACCOUNTS_RANGE[0]
    end_index = config.SETTINGS.ACCOUNTS_RANGE[1]

    # N·∫øu c·∫£ hai ƒë·ªÅu l√† 0, ki·ªÉm tra EXACT_ACCOUNTS_TO_USE
    if start_index == 0 and end_index == 0:
        if config.SETTINGS.EXACT_ACCOUNTS_TO_USE:
            # Chuy·ªÉn ƒë·ªïi s·ªë t√†i kho·∫£n th√†nh ch·ªâ s·ªë (s·ªë - 1)
            selected_indices = [i - 1 for i in config.SETTINGS.EXACT_ACCOUNTS_TO_USE]
            accounts_to_process = [private_keys[i] for i in selected_indices]
            logger.info(
                f"S·ª≠ d·ª•ng c√°c t√†i kho·∫£n c·ª• th·ªÉ: {config.SETTINGS.EXACT_ACCOUNTS_TO_USE}"
            )

            # ƒê·ªÉ t∆∞∆°ng th√≠ch v·ªõi ph·∫ßn c√≤n l·∫°i c·ªßa m√£
            start_index = min(config.SETTINGS.EXACT_ACCOUNTS_TO_USE)
            end_index = max(config.SETTINGS.EXACT_ACCOUNTS_TO_USE)
        else:
            # N·∫øu danh s√°ch tr·ªëng, l·∫•y t·∫•t c·∫£ t√†i kho·∫£n nh∆∞ tr∆∞·ªõc
            accounts_to_process = private_keys
            start_index = 1
            end_index = len(private_keys)
    else:
        # L√°t Python kh√¥ng bao g·ªìm ph·∫ßn t·ª≠ cu·ªëi, v√¨ v·∫≠y +1
        accounts_to_process = private_keys[start_index - 1 : end_index]

    discord_tokens = [""] * len(accounts_to_process)
    emails = [""] * len(accounts_to_process) 

    threads = config.SETTINGS.THREADS

    # Chu·∫©n b·ªã proxy cho c√°c t√†i kho·∫£n ƒë√£ ch·ªçn
    cycled_proxies = [
        proxies[i % len(proxies)] for i in range(len(accounts_to_process))
    ]

    # T·∫°o danh s√°ch ch·ªâ s·ªë v√† x√°o tr·ªôn n√≥
    shuffled_indices = list(range(len(accounts_to_process)))
    random.shuffle(shuffled_indices)

    # T·∫°o chu·ªói v·ªõi th·ª© t·ª± t√†i kho·∫£n
    account_order = " ".join(str(start_index + idx) for idx in shuffled_indices)
    logger.info(
        f"B·∫Øt ƒë·∫ßu v·ªõi c√°c t√†i kho·∫£n t·ª´ {start_index} ƒë·∫øn {end_index} theo th·ª© t·ª± ng·∫´u nhi√™n..."
    )
    logger.info(f"Th·ª© t·ª± t√†i kho·∫£n: {account_order}")

    lock = asyncio.Lock()
    semaphore = asyncio.Semaphore(value=threads)
    tasks = []

    # T·∫°o tr√¨nh theo d√µi ti·∫øn ƒë·ªô tr∆∞·ªõc khi t·∫°o t√°c v·ª•
    total_accounts = len(accounts_to_process)
    progress_tracker = await create_progress_tracker(
        total=total_accounts, description="T√†i kho·∫£n ƒë√£ ho√†n th√†nh"
    )

    # S·ª≠ d·ª•ng c√°c ch·ªâ s·ªë ƒë√£ x√°o tr·ªôn ƒë·ªÉ t·∫°o t√°c v·ª•
    for shuffled_idx in shuffled_indices:
        tasks.append(
            asyncio.create_task(
                launch_wrapper(
                    start_index + shuffled_idx,
                    cycled_proxies[shuffled_idx],
                    accounts_to_process[shuffled_idx],
                    discord_tokens[shuffled_idx],
                    twitter_tokens[shuffled_idx],
                    emails[shuffled_idx],
                )
            )
        )

    await asyncio.gather(*tasks)

    logger.success("ƒê√£ l∆∞u t√†i kho·∫£n v√† kh√≥a ri√™ng v√†o t·ªáp.")

    print_wallets_stats(config)

async def account_flow(
    account_index: int,
    proxy: str,
    private_key: str,
    discord_token: str,
    twitter_token: str,
    email: str,
    config: src.utils.config.Config,
    lock: asyncio.Lock,
    progress_tracker: ProgressTracker,
):
    try:
        pause = random.randint(
            config.SETTINGS.RANDOM_INITIALIZATION_PAUSE[0],
            config.SETTINGS.RANDOM_INITIALIZATION_PAUSE[1],
        )
        logger.info(f"[{account_index}] T·∫°m d·ª´ng {pause} gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu...")
        await asyncio.sleep(pause)

        report = False

        instance = src.model.Start(
            account_index, proxy, private_key, discord_token, twitter_token, email, config
        )

        result = await wrapper(instance.initialize, config)
        if not result:
            report = True

        result = await wrapper(instance.flow, config)
        if not result:
            report = True

        pause = random.randint(
            config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACCOUNTS[0],
            config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACCOUNTS[1],
        )
        logger.info(f"T·∫°m d·ª´ng {pause} gi√¢y tr∆∞·ªõc t√†i kho·∫£n ti·∫øp theo...")
        await asyncio.sleep(pause)

        # ·ªû cu·ªëi h√†m, b·∫•t k·ªÉ k·∫øt qu·∫£, c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
        await progress_tracker.increment(1)

    except Exception as err:
        logger.error(f"{account_index} | Quy tr√¨nh t√†i kho·∫£n th·∫•t b·∫°i: {err}")
        # Ngay c·∫£ khi x·∫£y ra l·ªói, v·∫´n t√≠nh t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        await progress_tracker.increment(1)

async def wrapper(function, config: src.utils.config.Config, *args, **kwargs):
    attempts = config.SETTINGS.ATTEMPTS
    for attempt in range(attempts):
        result = await function(*args, **kwargs)
        if isinstance(result, tuple) and result and isinstance(result[0], bool):
            if result[0]:
                return result
        elif isinstance(result, bool):
            if result:
                return True

        if attempt < attempts - 1:  # Kh√¥ng t·∫°m d·ª´ng sau l·∫ßn th·ª≠ cu·ªëi
            pause = random.randint(
                config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[0],
                config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[1],
            )
            logger.info(
                f"T·∫°m d·ª´ng {pause} gi√¢y tr∆∞·ªõc l·∫ßn th·ª≠ ti·∫øp theo {attempt+1}/{config.SETTINGS.ATTEMPTS}..."
            )
            await asyncio.sleep(pause)

    return result

def task_exists_in_config(task_name: str, tasks_list: list) -> bool:
    """Ki·ªÉm tra ƒë·ªá quy s·ª± t·ªìn t·∫°i c·ªßa t√°c v·ª• trong danh s√°ch t√°c v·ª•, bao g·ªìm c√°c danh s√°ch l·ªìng nhau"""
    for task in tasks_list:
        if isinstance(task, list):
            if task_exists_in_config(task_name, task):
                return True
        elif task == task_name:
            return True
    return False